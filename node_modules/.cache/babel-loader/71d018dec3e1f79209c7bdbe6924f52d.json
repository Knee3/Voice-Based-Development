{"ast":null,"code":"/**\n * datastructures-js/linked-list\n * @copyright 2018 Eyas Ranjous <eyas.ranjous@gmail.com>\n * @license MIT\n */\n\n/**\n * Linked List Node\n * @function\n */\nvar node = function node(val, nex) {\n  var value = val;\n  var next = nex;\n  /**\n   * @param {string|number} v\n   */\n\n  var setValue = function setValue(v) {\n    value = v;\n  };\n  /**\n   * @return {string|number}\n   */\n\n\n  var getValue = function getValue() {\n    return value;\n  };\n  /**\n   * @param {object} - node\n   */\n\n\n  var setNext = function setNext(n) {\n    next = n;\n  };\n  /**\n   * @return {object} - node\n   */\n\n\n  var getNext = function getNext() {\n    return next || null;\n  }; // linkedList node API\n\n\n  return {\n    setValue: setValue,\n    getValue: getValue,\n    setNext: setNext,\n    getNext: getNext\n  };\n};\n/**\n * Linked List\n * @function\n */\n\n\nvar linkedList = function linkedList() {\n  var headNode = null;\n  var nodesCount = 0;\n  /**\n   * @returns {object} - node\n   */\n\n  var head = function head() {\n    return headNode;\n  };\n  /**\n   * @returns {number}\n   */\n\n\n  var count = function count() {\n    return nodesCount;\n  };\n  /**\n   * @param {string|number} value\n   * @returns {object} - node\n   */\n\n\n  var find = function find(value) {\n    var current = headNode;\n\n    while (current !== null) {\n      if (current.getValue() === value) {\n        return current;\n      }\n\n      current = current.getNext();\n    }\n\n    return current;\n  };\n  /**\n   * @param {string|number} value\n   */\n\n\n  var addFirst = function addFirst(value) {\n    if (headNode === null) {\n      headNode = node(value);\n    } else {\n      headNode = node(value, headNode);\n    }\n\n    nodesCount += 1;\n  };\n  /**\n   * @param {string|number} value\n   */\n\n\n  var addLast = function addLast(value) {\n    if (headNode === null) {\n      headNode = node(value);\n    } else {\n      var current = headNode;\n\n      while (current.getNext() !== null) {\n        current = current.getNext();\n      }\n\n      current.setNext(node(value));\n    }\n\n    nodesCount += 1;\n  };\n  /**\n   * adds a new node after an existing node\n   * @param {string|number} value\n   * @param {string|number} newValue\n   * @throws {Error}\n   */\n\n\n  var addAfter = function addAfter(value, newValue) {\n    var current = headNode;\n\n    while (current !== null) {\n      if (current.getValue() === value) {\n        current.setNext(node(newValue, current.getNext()));\n        nodesCount += 1;\n        break;\n      } else {\n        current = current.getNext();\n      }\n    }\n\n    if (current === null) {\n      throw new Error(\"node \".concat(value, \" not found\"));\n    }\n  };\n  /**\n   * @public\n   * adds a new node before an existing node\n   * @param {(string|number)} value\n   * @param {(string|number)} newValue\n   * @throws {Error}\n   */\n\n\n  var addBefore = function addBefore(value, newValue) {\n    var prev = null;\n    var current = headNode;\n\n    while (current !== null) {\n      if (current.getValue() === value) {\n        if (prev === null) {\n          addFirst(newValue);\n        } else {\n          prev.setNext(node(newValue, current));\n          nodesCount += 1;\n        }\n\n        break;\n      } else {\n        prev = current;\n        current = current.getNext();\n      }\n    }\n\n    if (current === null) {\n      throw new Error(\"node \".concat(value, \" not found\"));\n    }\n  };\n  /**\n   * removes the first node\n   */\n\n\n  var removeFirst = function removeFirst() {\n    if (headNode !== null) {\n      if (headNode.getNext() === null) {\n        headNode = null;\n      } else {\n        headNode = headNode.getNext();\n      }\n\n      nodesCount -= 1;\n    }\n  };\n  /**\n   * removes the last node\n   */\n\n\n  var removeLast = function removeLast() {\n    var prev = null;\n    var current = headNode;\n\n    while (current.getNext() !== null) {\n      prev = current;\n      current = current.getNext();\n    }\n\n    if (prev === null) {\n      removeFirst();\n    } else {\n      prev.setNext(null);\n      nodesCount -= 1;\n    }\n  };\n  /**\n   * removes a node by its value\n   * @param {(string|number)} value\n   */\n\n\n  var remove = function remove(value) {\n    var prev = null;\n    var current = headNode;\n\n    while (current !== null) {\n      if (current.getValue() === value) {\n        if (prev === null) {\n          removeFirst();\n        } else {\n          prev.setNext(current.getNext());\n          nodesCount -= 1;\n        }\n\n        break;\n      } else {\n        prev = current;\n        current = current.getNext();\n      }\n    }\n  };\n  /**\n   * traverse the linkedlist from a beginning to end\n   * @param {function} cb - called with node in the linked list\n   */\n\n\n  var traverse = function traverse(cb) {\n    var current = headNode;\n\n    while (current !== null) {\n      cb(current);\n      current = current.getNext();\n    }\n  };\n  /**\n   * @returns {array}\n   */\n\n\n  var toArray = function toArray() {\n    var arr = [];\n    traverse(function (n) {\n      return arr.push(n.getValue());\n    });\n    return arr;\n  };\n  /**\n   * clears the linked list\n   */\n\n\n  var clear = function clear() {\n    headNode = null;\n    nodesCount = 0;\n  }; // linkedList API\n\n\n  return {\n    node: node,\n    head: head,\n    count: count,\n    find: find,\n    addFirst: addFirst,\n    addLast: addLast,\n    addBefore: addBefore,\n    addAfter: addAfter,\n    remove: remove,\n    removeFirst: removeFirst,\n    removeLast: removeLast,\n    traverse: traverse,\n    toArray: toArray,\n    clear: clear\n  };\n};\n\nmodule.exports = linkedList;","map":null,"metadata":{},"sourceType":"script"}